/* {{> sign}} */

using System;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Abstractions;
using Telerik.Sitefinity.Configuration;
using Telerik.Sitefinity.Services.Events;
using Telerik.Sitefinity.Services;

using {{pascalCaseName}};

[assembly: SitefinityModule("{{pascalCaseName}}", 
							typeof({{pascalCaseName}}Module), 
							"{{name}}", 
							/* Enter the module description here */ "", 
							StartupType.OnApplicationStart)]

namespace {{pascalCaseName}}
{
    /// <summary>
    /// Represents custom module. 
    /// For more information on custom modules see our documentation: https://www.progress.com/documentation/sitefinity-cms/overview-custom-modules
    /// For sample custom module project see this project in the Sitefinity GitHub repo: https://github.com/Sitefinity/Database-diagnostic-module
    /// </summary>
    public class {{pascalCaseName}}Module : ModuleBase
    {
        /// <summary>
        /// Gets the landing page id for the module.
        /// </summary>
        /// <value>The landing page id.</value>
        public override Guid LandingPageId
        {
            get
            {
                return Guid.Empty;
            }
        }

        /// <summary>
        /// Installs the module.
        /// </summary>
        /// <param name="initializer">The initializer. A helper class for installing Sitefinity modules.</param>
        public override void Install(SiteInitializer initializer)
        {
            //// For more options uncomment the following line and use the Fluent API
            //initializer.Installer
        }

        ///// <summary>
        ///// Demonstration of the EventHub.Subscribe generic method. TEvent has to be explicitely specified and it has to implement the IEvent interface
        ///// For more information on the Sitefinity CMS Event System see this page in the documentation: https://www.progress.com/documentation/sitefinity-cms/for-developers-sitefinity-cms-event-system
        ///// </summary>
        //public override void Load()
        //{
        //    base.Load();
        //    EventHub.Subscribe<IEvent>(this.Handle);
        //}

        ///// <summary>
        ///// Implement this method to handle the event you have subscribed to in the Load method.
        ///// </summary>
        ///// <param name="event">The event</param>
        //private void Handle(IEvent @event)
        //{
        //}

        /// <summary>
        /// Initializes the service with specified settings.
        /// </summary>
        /// <param name="settings">The settings.</param>
        public override void Initialize(ModuleSettings settings)
        {
            base.Initialize(settings);

            App.WorkWith().Module(Name)
                .Initialize()
                    .Configuration<{{pascalCaseName}}Config>();
        }

        /// <summary>
        /// Gets the module config.
        /// </summary>
        /// <returns></returns>
        protected override ConfigSection GetModuleConfig()
        {
            return Config.Get<{{pascalCaseName}}Config>();
        }

        /// <summary>
        /// Gets the CLR types of all data managers provided by this module.
        /// </summary>
        /// <value>An array of <see cref="Type"/> objects.</value>
        public override Type[] Managers
        {
            get { return new Type[0]; }
        }
    }
}